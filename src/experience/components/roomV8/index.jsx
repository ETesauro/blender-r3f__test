/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useMemo, useRef } from 'react'

import { folder, useControls } from 'leva'

import { useGLTF, useTexture } from '@react-three/drei'

import { useRoomAnimations } from '../../hooks'
import { Books, Desk, Guitar, Lavagna, LeftMonitor, Quadro, RightMonitor, ShadowCatcher } from './components'

import './materials'
import { useMobile } from '../../../ui/hooks'
import { useThree } from '@react-three/fiber'

export function RoomV8(props) {
  // Room Nodes
  const { nodes } = useGLTF('./models/room_v8/desk/room.glb')

  // Textures
  const bakedTexture = useTexture('./models/room_v8/desk/room_baked.jpg')
  bakedTexture.flipY = false

  // Refs
  const desk = useRef()
  const guitar = useRef()
  const books = useRef()
  const quadro = useRef()
  const lavagna = useRef()
  const shadowCatcher = useRef()

  // Evita che l'oggetto venga ricreato ad ogni render
  const refs = useMemo(() => ({ desk, guitar, books, quadro, lavagna, shadowCatcher }), [])

  const isMobile = useMobile()
  const viewport = useThree((state) => state.viewport)

  // Controls
  var { desktopPosition, mobilePosition, desktopRotation, mobileRotation, desktopScale, mobileScale } = useControls('Room V8', {
    desk: folder(
      {
        desktopPosition: { value: [0.71, -1.17, 1.41], max: 10, step: 0.01 },
        mobilePosition: { value: [-0.32, -viewport.height / 2 + 0.5, 0], max: 10, step: 0.01 },
        desktopRotation: { value: [0, 5.45, 0], max: 10, step: 0.01 },
        mobileRotation: { value: [0, -6.81, 0], max: 10, step: 0.01 },
        desktopScale: { value: 0.7, max: 10, step: 0.01 },
        mobileScale: { value: 0.55, max: 10, step: 0.01 }
      },
      { collapsed: false }
    )
  })

  // Room Animations
  useRoomAnimations(refs)

  return (
    <group
      {...props}
      dispose={null}
      position={isMobile ? mobilePosition : desktopPosition}
      rotation={isMobile ? mobileRotation : desktopRotation}
      scale={isMobile ? mobileScale : desktopScale}
    >
      {/* Desk */}
      <group ref={desk}>
        <Desk geometry={nodes.desk.geometry} bakedTexture={bakedTexture} />

        <LeftMonitor geometry={nodes.left_monitor.geometry} />
        <RightMonitor geometry={nodes.right_monitor.geometry} />
      </group>

      {/* Stuff */}
      <Books ref={books} geometry={nodes.books.geometry} bakedTexture={bakedTexture} />
      <Guitar ref={guitar} geometry={nodes.guitar.geometry} bakedTexture={bakedTexture} />
      <Lavagna ref={lavagna} geometry={nodes.lavagna.geometry} bakedTexture={bakedTexture} />
      <Quadro ref={quadro} geometry={nodes.quadro.geometry} bakedTexture={bakedTexture} />

      {/* ShadowCatcher */}
      <ShadowCatcher ref={shadowCatcher} />
    </group>
  )
}

useGLTF.preload('./models/room_v8/desk/room.glb')
useTexture.preload('./models/room_v8/desk/room_baked.jpg')
