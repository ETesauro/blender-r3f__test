/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useEffect, useRef, forwardRef } from 'react'

import { folder, useControls } from 'leva'

import { useGLTF, useTexture } from '@react-three/drei'

export const ShadowCatcher = forwardRef((props, ref) => {
  const { nodes } = useGLTF('./models/room_v8/shadow/shadow_catcher.glb')

  const shadowTexture = useTexture('./models/room_v8/shadow/shadow.jpg')
  shadowTexture.flipY = false

  // Controls
  var { color, opacity } = useControls('Room V8', {
    shadow: folder(
      {
        // color: { value: '#e6cea8' },
        color: { value: '#dbc3a0' },
        opacity: { value: 1, min: 0, max: 1, step: 0.01 }
      },
      { collapsed: true }
    )
  })

  return (
    <group {...props} dispose={null}>
      <mesh name='shadow_catcher' ref={ref} geometry={nodes.shadow_catcher.geometry} position={[0.601, 0, -1.095]}>
        <shadowCatcherMaterial uColor={color} uOpacity={opacity} alphaMask={shadowTexture} transparent />
      </mesh>
    </group>
  )
})

useGLTF.preload('./models/room_v8/shadow/shadow_catcher.glb')
useTexture.preload('./models/room_v8/shadow_catcher/shadow.jpg')
