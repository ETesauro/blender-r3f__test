/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { forwardRef, useEffect, useRef } from 'react'

import gsap from 'gsap'
import * as THREE from 'three'
import { folder, useControls } from 'leva'

import { extend, useFrame } from '@react-three/fiber'
import { shaderMaterial, useGLTF, useTexture } from '@react-three/drei'

import animations from '../config/animations'
import vertexShader from '../shaders/shadow_catcher/vertex.glsl'
import fragmentShader from '../shaders/shadow_catcher/fragment.glsl'
import portalVertexShader from '../shaders/portal/vertex.glsl'
import portalFragmentShader from '../shaders/portal/fragment.glsl'
import coffeeSmokeVertexShader from '../shaders/coffeeSmoke/vertex.glsl'
import coffeeSmokeFragmentShader from '../shaders/coffeeSmoke/fragment.glsl'

export function DeskV5(props) {
  // Models
  const { nodes: roomNodes } = useGLTF('./models/desk_v5/desk_3.glb')
  const { nodes: shadowCatcherNodes } = useGLTF('./models/desk_v5/shadow_catcher.glb')

  // Textures
  const bakedTexture = useTexture('./models/desk_v5/baked_3.jpg')
  const shadowTexture = useTexture('./models/desk_v5/shadow_3.1_final.jpg')
  const perlinTexture = useTexture('./models/desk_v5/perlin.png')
  bakedTexture.flipY = false
  shadowTexture.flipY = false
  perlinTexture.wrapS = THREE.RepeatWrapping
  perlinTexture.wrapT = THREE.RepeatWrapping

  // Materials
  const portalMaterialLeft = useRef()
  const portalMaterialRight = useRef()
  const smokeMaterial = useRef()

  // Refs
  const model = useRef()
  const shadowCatcher = useRef()
  const guitar = useRef()
  const books = useRef()

  // Controls
  var { color, opacity, position, leftMonitorStart, leftMonitorEnd, rightMonitorStart, rightMonitorEnd } = useControls('Desk V5', {
    model: folder(
      {
        position: { value: [1.29, 0, -0.62], max: 10, step: 0.01 }
      },
      { collapsed: true }
    ),
    shadow: folder(
      {
        color: { value: '#e6cea8' },
        opacity: { value: 0, min: 0, max: 1, step: 0.01 }
      },
      { collapsed: true }
    )
  })

  useEffect(() => {
    // Desk
    gsap.to(model.current.scale, {
      x: 1,
      y: 1,
      z: 1,
      delay: animations.delays.room.desk,
      duration: animations.durations.room.desk,
      ease: animations.ease.elasticOut
    })

    // Guitar
    gsap.to(guitar.current.scale, {
      x: 1,
      y: 1,
      z: 1,
      delay: animations.delays.room.wallStuff.guitar,
      duration: animations.durations.room.wallStuff.guitar,
      ease: animations.ease.elasticOut
    })

    // Books
    gsap.to(books.current.scale, {
      x: 1,
      y: 1,
      z: 1,
      delay: animations.delays.room.wallStuff.books,
      duration: animations.durations.room.wallStuff.books,
      ease: animations.ease.elasticOut
    })

    // Shadow
    gsap.to(shadowCatcher.current.material.uniforms.uOpacity, {
      value: 1,
      duration: animations.durations.room.shadow,
      delay: animations.delays.room.shadow,
      ease: animations.ease.power1Out
    })
  }, [])

  useFrame((state, delta) => {
    portalMaterialLeft.current.uTime += delta
    portalMaterialRight.current.uTime += delta
    smokeMaterial.current.uTime += delta
  })

  return (
    <group {...props} dispose={null} position={position}>
      {/* Desk - Chair (la sedia doveva essere mergiata con Desk) - Emissions */}
      <group ref={model} scale={[0, 0, 0]}>
        <Desk roomNodes={roomNodes} bakedTexture={bakedTexture} />
        <Chair roomNodes={roomNodes} bakedTexture={bakedTexture} />
        {/* Smoke */}
        <mesh scale={[0.15, 0.6, 0.5]} position={[-0.81, 2.0, -0.13]}>
          <planeGeometry args={[1, 1, 16, 64]} />
          <smokeMaterial uPerlinTexture={perlinTexture} transparent={true} side={THREE.DoubleSide} ref={smokeMaterial} depthWrite={false} />
        </mesh>

        <RightMonitor roomNodes={roomNodes} portalMaterialRight={portalMaterialRight} />
        <LeftMonitor roomNodes={roomNodes} portalMaterialLeft={portalMaterialLeft} />
      </group>

      {/* Wall stuff */}
      <Books ref={books} roomNodes={roomNodes} bakedTexture={bakedTexture} />
      <Guitar ref={guitar} roomNodes={roomNodes} bakedTexture={bakedTexture} />

      {/* Shadow Catcher */}
      <mesh ref={shadowCatcher} geometry={shadowCatcherNodes.shadow_catcher.geometry} position={[0, 0, 1.981]}>
        <stageMaterial uColor={color} uOpacity={opacity} alphaMask={shadowTexture} transparent />
      </mesh>
    </group>
  )
}

useGLTF.preload('./models/desk_v5/desk_3.glb')
useGLTF.preload('./models/desk_v5/shadow_catcher.glb')
useTexture.preload('./models/desk_v5/baked_3.jpg')
useTexture.preload('./models/desk_v5/shadow_3.1_final.jpg')
useTexture.preload('./models/desk_v5/perlin.png')

// ------- OBJECTS -------

const Desk = ({ roomNodes, bakedTexture }) => {
  return (
    <mesh name='desk' geometry={roomNodes.desk.geometry} position={[-1.797, 1.721, -0.18]}>
      <meshBasicMaterial map={bakedTexture} />
    </mesh>
  )
}

const Chair = ({ roomNodes, bakedTexture }) => {
  return (
    <mesh name='chair' geometry={roomNodes.chair.geometry} position={[0.9, 1.23, 1.306]}>
      <meshBasicMaterial map={bakedTexture} />
    </mesh>
  )
}

const RightMonitor = ({ roomNodes, portalMaterialRight }) => {
  var { rightMonitorStart, rightMonitorEnd } = useControls('Desk V5', {
    rightMonitor: folder(
      {
        rightMonitorStart: { value: '#209bff' },
        rightMonitorEnd: { value: '#000000' }
      },
      { collapsed: true }
    )
  })

  return (
    <mesh name='right_monitor' geometry={roomNodes.right_monitor.geometry} position={[1.679, 2.542, -0.815]} rotation={[0, -0.084, 0]}>
      <portalMaterial ref={portalMaterialRight} uColorStart={rightMonitorStart} uColorEnd={rightMonitorEnd} />
    </mesh>
  )
}

const LeftMonitor = ({ roomNodes, portalMaterialLeft }) => {
  var { leftMonitorStart, leftMonitorEnd } = useControls('Desk V5', {
    leftMonitor: folder(
      {
        leftMonitorStart: { value: '#ad613c' },
        leftMonitorEnd: { value: '#000000' }
      },
      { collapsed: true }
    )
  })

  return (
    <mesh name='left_monitor' geometry={roomNodes.left_monitor.geometry} position={[-0.511, 2.542, -0.77]} rotation={[0, 0.232, 0]}>
      <portalMaterial ref={portalMaterialLeft} uColorStart={leftMonitorStart} uColorEnd={leftMonitorEnd} />
    </mesh>
  )
}

const Books = forwardRef(({ bakedTexture, roomNodes }, ref) => {
  return (
    <mesh name='books' ref={ref} geometry={roomNodes.books.geometry} material={roomNodes.books.material} scale={[0, 0, 0]} position={[0.418, 4.182, -1.092]}>
      <meshBasicMaterial map={bakedTexture} />
    </mesh>
  )
})

const Guitar = forwardRef(({ bakedTexture, roomNodes }, ref) => {
  return (
    <mesh name='guitar' ref={ref} geometry={roomNodes.guitar.geometry} material={roomNodes.guitar.material} position={[-3.325, 2.949, -1.142]}>
      <meshBasicMaterial map={bakedTexture} />
    </mesh>
  )
})

// ------- SHADER MATERIALS -------
const PortalMaterial = shaderMaterial(
  {
    uTime: 0,
    uColorStart: new THREE.Color('#ffffff'),
    uColorEnd: new THREE.Color('#000000')
  },
  portalVertexShader,
  portalFragmentShader
)

const StageMaterial = shaderMaterial(
  {
    alphaMask: new THREE.Texture(),
    uColor: new THREE.Color('#e6cea8'),
    uOpacity: 1.0
  },
  vertexShader,
  fragmentShader
)

const SmokeMaterial = shaderMaterial(
  {
    uTime: 0,
    uPerlinTexture: new THREE.Texture()
  },
  coffeeSmokeVertexShader,
  coffeeSmokeFragmentShader
)

// const TestMaterial = shaderMaterial(
//   {},
//   `void main() {
//     gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);
//   }`,
//   `
//   `
// )

extend({ StageMaterial })
extend({ PortalMaterial })
extend({ SmokeMaterial })
// extend({ TestMaterial })
